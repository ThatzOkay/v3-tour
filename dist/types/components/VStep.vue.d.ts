import { Step } from "../shared/types";
type __VLS_Props = {
    step: Step;
    previousStep: () => void;
    nextStep: () => void;
    stop: () => void;
    skip?: () => void;
    finish?: () => void;
    isFirst: boolean;
    isLast: boolean;
    labels: {
        buttonSkip: string;
        buttonPrevious: string;
        buttonNext: string;
        buttonStop: string;
    };
    enabledButtons?: {
        buttonSkip?: boolean;
        buttonPrevious?: boolean;
        buttonNext?: boolean;
        buttonStop?: boolean;
    };
    highlight: boolean;
    stopOnFail?: boolean;
    debug?: boolean;
    ionic?: boolean;
};
declare var __VLS_1: {}, __VLS_3: {}, __VLS_5: {};
type __VLS_Slots = {} & {
    header?: (props: typeof __VLS_1) => any;
} & {
    content?: (props: typeof __VLS_3) => any;
} & {
    actions?: (props: typeof __VLS_5) => any;
};
declare const __VLS_component: import("vue").DefineComponent<__VLS_Props, {
    [n: number]: () => void;
    length: number;
    toString(): string;
    toLocaleString(): string;
    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string;
    pop(): (() => void) | undefined;
    push(...items: (() => void)[]): number;
    concat(...items: ConcatArray<() => void>[]): (() => void)[];
    concat(...items: ((() => void) | ConcatArray<() => void>)[]): (() => void)[];
    join(separator?: string): string;
    reverse(): (() => void)[];
    shift(): (() => void) | undefined;
    slice(start?: number, end?: number): (() => void)[];
    sort(compareFn?: ((a: () => void, b: () => void) => number) | undefined): (() => void)[];
    splice(start: number, deleteCount?: number): (() => void)[];
    splice(start: number, deleteCount: number, ...items: (() => void)[]): (() => void)[];
    unshift(...items: (() => void)[]): number;
    indexOf(searchElement: () => void, fromIndex?: number): number;
    lastIndexOf(searchElement: () => void, fromIndex?: number): number;
    every<S extends () => void>(predicate: (value: () => void, index: number, array: (() => void)[]) => value is S, thisArg?: any): this is S[];
    every(predicate: (value: () => void, index: number, array: (() => void)[]) => unknown, thisArg?: any): boolean;
    some(predicate: (value: () => void, index: number, array: (() => void)[]) => unknown, thisArg?: any): boolean;
    forEach(callbackfn: (value: () => void, index: number, array: (() => void)[]) => void, thisArg?: any): void;
    map<U>(callbackfn: (value: () => void, index: number, array: (() => void)[]) => U, thisArg?: any): U[];
    filter<S extends () => void>(predicate: (value: () => void, index: number, array: (() => void)[]) => value is S, thisArg?: any): S[];
    filter(predicate: (value: () => void, index: number, array: (() => void)[]) => unknown, thisArg?: any): (() => void)[];
    reduce(callbackfn: (previousValue: () => void, currentValue: () => void, currentIndex: number, array: (() => void)[]) => () => void): () => void;
    reduce(callbackfn: (previousValue: () => void, currentValue: () => void, currentIndex: number, array: (() => void)[]) => () => void, initialValue: () => void): () => void;
    reduce<U>(callbackfn: (previousValue: U, currentValue: () => void, currentIndex: number, array: (() => void)[]) => U, initialValue: U): U;
    reduceRight(callbackfn: (previousValue: () => void, currentValue: () => void, currentIndex: number, array: (() => void)[]) => () => void): () => void;
    reduceRight(callbackfn: (previousValue: () => void, currentValue: () => void, currentIndex: number, array: (() => void)[]) => () => void, initialValue: () => void): () => void;
    reduceRight<U>(callbackfn: (previousValue: U, currentValue: () => void, currentIndex: number, array: (() => void)[]) => U, initialValue: U): U;
    find<S extends () => void>(predicate: (value: () => void, index: number, obj: (() => void)[]) => value is S, thisArg?: any): S | undefined;
    find(predicate: (value: () => void, index: number, obj: (() => void)[]) => unknown, thisArg?: any): (() => void) | undefined;
    findIndex(predicate: (value: () => void, index: number, obj: (() => void)[]) => unknown, thisArg?: any): number;
    fill(value: () => void, start?: number, end?: number): (() => void)[];
    copyWithin(target: number, start: number, end?: number): (() => void)[];
    entries(): ArrayIterator<[number, () => void]>;
    keys(): ArrayIterator<number>;
    values(): ArrayIterator<() => void>;
    includes(searchElement: () => void, fromIndex?: number): boolean;
    flatMap<U, This = undefined>(callback: (this: This, value: () => void, index: number, array: (() => void)[]) => U | readonly U[], thisArg?: This | undefined): U[];
    flat<A, D extends number = 1>(this: A, depth?: D | undefined): FlatArray<A, D>[];
    at(index: number): (() => void) | undefined;
    findLast<S extends () => void>(predicate: (value: () => void, index: number, array: (() => void)[]) => value is S, thisArg?: any): S | undefined;
    findLast(predicate: (value: () => void, index: number, array: (() => void)[]) => unknown, thisArg?: any): (() => void) | undefined;
    findLastIndex(predicate: (value: () => void, index: number, array: (() => void)[]) => unknown, thisArg?: any): number;
    toReversed(): (() => void)[];
    toSorted(compareFn?: ((a: () => void, b: () => void) => number) | undefined): (() => void)[];
    toSpliced(start: number, deleteCount: number, ...items: (() => void)[]): (() => void)[];
    toSpliced(start: number, deleteCount?: number): (() => void)[];
    with(index: number, value: () => void): (() => void)[];
    [Symbol.iterator](): ArrayIterator<() => void>;
    [Symbol.unscopables]: {
        [x: number]: boolean | undefined;
        length?: boolean | undefined;
        toString?: boolean | undefined;
        toLocaleString?: boolean | undefined;
        pop?: boolean | undefined;
        push?: boolean | undefined;
        concat?: boolean | undefined;
        join?: boolean | undefined;
        reverse?: boolean | undefined;
        shift?: boolean | undefined;
        slice?: boolean | undefined;
        sort?: boolean | undefined;
        splice?: boolean | undefined;
        unshift?: boolean | undefined;
        indexOf?: boolean | undefined;
        lastIndexOf?: boolean | undefined;
        every?: boolean | undefined;
        some?: boolean | undefined;
        forEach?: boolean | undefined;
        map?: boolean | undefined;
        filter?: boolean | undefined;
        reduce?: boolean | undefined;
        reduceRight?: boolean | undefined;
        find?: boolean | undefined;
        findIndex?: boolean | undefined;
        fill?: boolean | undefined;
        copyWithin?: boolean | undefined;
        entries?: boolean | undefined;
        keys?: boolean | undefined;
        values?: boolean | undefined;
        includes?: boolean | undefined;
        flatMap?: boolean | undefined;
        flat?: boolean | undefined;
        at?: boolean | undefined;
        findLast?: boolean | undefined;
        findLastIndex?: boolean | undefined;
        toReversed?: boolean | undefined;
        toSorted?: boolean | undefined;
        toSpliced?: boolean | undefined;
        with?: boolean | undefined;
        [Symbol.iterator]?: boolean | undefined;
        readonly [Symbol.unscopables]?: boolean | undefined;
    };
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    targetNotFound: (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<__VLS_Props> & Readonly<{
    onTargetNotFound?: ((...args: any[]) => any) | undefined;
}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithSlots<typeof __VLS_component, __VLS_Slots>;
export default _default;
type __VLS_WithSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
